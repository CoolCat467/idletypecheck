[build-system]
requires = ["setuptools >= 64"]
build-backend = "setuptools.build_meta"

[project]
name = "idletypecheck"
dynamic = ["version"]
authors = [
  { name="CoolCat467", email="CoolCat467@duck.com" },
]
description = "Mypy type checking extension for Python IDLE"
readme = {file = "README.md", content-type = "text/markdown"}
license = {file = "LICENSE"}
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Software Development",
    "Topic :: Text Editors :: Integrated Development Environments (IDE)",
    "Topic :: Utilities",
    "Operating System :: OS Independent",
    "Framework :: IDLE",
    "Topic :: Utilities",
    "Typing :: Typed",
]
keywords = ["mypy", "idle", "extension", "development"]
dependencies = [
    "mypy>=1.8.0",
]

[tool.setuptools.dynamic]
version = {attr = "idletypecheck.__init__.__version__"}

[project.optional-dependencies]
user = ["idleuserextend~=0.0.0"]

[project.urls]
"Source" = "https://github.com/CoolCat467/idletypecheck"
"Bug Tracker" = "https://github.com/CoolCat467/idletypecheck/issues"

[project.scripts]
idletypecheck = "idletypecheck:check_installed"

[tool.setuptools.package-data]
idletypecheck = ["py.typed"]

[tool.mypy]
mypy_path = "src"
check_untyped_defs = true
disallow_any_generics = true
disallow_untyped_calls = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
no_implicit_reexport = true
show_column_numbers = true
show_error_codes = true
show_traceback = true
strict = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.ruff.lint.isort]
combine-as-imports = true

[tool.pycln]
all = true
disable_all_dunder_policy = true

[tool.black]
line-length = 79
target-version = ['py311']

[tool.ruff]
line-length = 79
fix = true

include = ["*.py", "*.pyi", "**/pyproject.toml"]

[tool.ruff.lint]
select = [
    "A",     # flake8-builtins
    "ASYNC", # flake8-async
    "B",     # flake8-bugbear
    "E",     # Error
    "F",     # pyflakes
    "I",     # isort
    "RUF",   # Ruff-specific rules
    "S",     # flake8-bandit
    "UP",    # pyupgrade
    "W",     # Warning
    "YTT",   # flake8-2020
]
extend-ignore = [
    "E501",   # line-too-long
    "S101",   # use of assert for tests and type narrowing
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "D100",  # undocumented-public-module
    "D103",  # undocumented-public-function
    "D107",  # Missing docstring
]

[tool.pytest.ini_options]
addopts = "--cov-report term-missing --cov=idletypecheck"
testpaths = [
    "tests",
]

[tool.coverage.run]
branch = true
source = ["src"]
omit = []

[tool.coverage.report]
precision = 1
skip_covered = true
exclude_also = [
    "pragma: no cover",
    "abc.abstractmethod",
    "if TYPE_CHECKING.*:",
    "if _t.TYPE_CHECKING:",
    "if t.TYPE_CHECKING:",
    "@overload",
    'class .*\bProtocol\b.*\):',
    "raise NotImplementedError",
]
partial_branches = [
    "pragma: no branch",
    "if not TYPE_CHECKING:",
    "if not _t.TYPE_CHECKING:",
    "if not t.TYPE_CHECKING:",
    "if .* or not TYPE_CHECKING:",
    "if .* or not _t.TYPE_CHECKING:",
    "if .* or not t.TYPE_CHECKING:",
]

[tool.tox]
legacy_tox_ini = """
    [tox]
    envlist = py310, py311, py312, mypy, pytest
    isolated_build = false

    [gh-actions]
    python =
        3.10: py310, mypy, pytest
        3.11: py311, mypy
        3.12: py312, mypy, pytest

    [testenv]
    setenv =
        PYTHONPATH = {toxinidir}

    [testenv:pytest]
    deps =
        pytest
        pytest-cov
        pytest-trio
    commands = pytest --basetemp={envtmpdir}

    [testenv:mypy]
    deps =
        mypy
    commands = mypy src
"""
